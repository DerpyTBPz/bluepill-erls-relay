
bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003524  08003524  00004524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003550  08003550  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003550  08003550  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003550  08003550  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003550  08003550  00004550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003554  08003554  00004554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003558  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000014  0800356c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800356c  000053ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c90a  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002155  00000000  00000000  00011947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00013aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a11  00000000  00000000  00014738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001738b  00000000  00000000  00015149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f188  00000000  00000000  0002c4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086aae  00000000  00000000  0003b65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c210a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000339c  00000000  00000000  000c2150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c54ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	0800350c 	.word	0x0800350c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	0800350c 	.word	0x0800350c

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	@ (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	@ (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	@ (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200d      	movs	r0, #13
 8000170:	f000 fe05 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000174:	200d      	movs	r0, #13
 8000176:	f000 fe1e 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	2010      	movs	r0, #16
 8000180:	f000 fdfd 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000184:	2010      	movs	r0, #16
 8000186:	f000 fe16 	bl	8000db6 <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b27      	ldr	r3, [pc, #156]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a26      	ldr	r2, [pc, #152]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b24      	ldr	r3, [pc, #144]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b21      	ldr	r3, [pc, #132]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a20      	ldr	r2, [pc, #128]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000264 <MX_GPIO_Init+0xcc>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b18      	ldr	r3, [pc, #96]	@ (8000264 <MX_GPIO_Init+0xcc>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	603b      	str	r3, [r7, #0]
 800020a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000212:	4815      	ldr	r0, [pc, #84]	@ (8000268 <MX_GPIO_Init+0xd0>)
 8000214:	f001 fa10 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2101      	movs	r1, #1
 800021c:	4813      	ldr	r0, [pc, #76]	@ (800026c <MX_GPIO_Init+0xd4>)
 800021e:	f001 fa0b 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000222:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000228:	2301      	movs	r3, #1
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022c:	2300      	movs	r3, #0
 800022e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000230:	2302      	movs	r3, #2
 8000232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	480b      	ldr	r0, [pc, #44]	@ (8000268 <MX_GPIO_Init+0xd0>)
 800023c:	f001 f878 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000240:	2301      	movs	r3, #1
 8000242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2302      	movs	r3, #2
 800024e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000250:	f107 0310 	add.w	r3, r7, #16
 8000254:	4619      	mov	r1, r3
 8000256:	4805      	ldr	r0, [pc, #20]	@ (800026c <MX_GPIO_Init+0xd4>)
 8000258:	f001 f86a 	bl	8001330 <HAL_GPIO_Init>

}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000
 8000268:	40011000 	.word	0x40011000
 800026c:	40010800 	.word	0x40010800

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fc4a 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f82e 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f7ff ff8c 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 8000280:	f7ff ff64 	bl	800014c <MX_DMA_Init>
  MX_TIM2_Init();
 8000284:	f000 fa6e 	bl	8000764 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000288:	f000 fadc 	bl	8000844 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800028c:	f000 fb04 	bl	8000898 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, circBuff1, CIRCULAR_BUFF_MAX_SIZE);
 8000290:	2280      	movs	r2, #128	@ 0x80
 8000292:	490c      	ldr	r1, [pc, #48]	@ (80002c4 <main+0x54>)
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <main+0x58>)
 8000296:	f002 fa39 	bl	800270c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, circBuff2, CIRCULAR_BUFF_MAX_SIZE);
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	490b      	ldr	r1, [pc, #44]	@ (80002cc <main+0x5c>)
 800029e:	480c      	ldr	r0, [pc, #48]	@ (80002d0 <main+0x60>)
 80002a0:	f002 fa34 	bl	800270c <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80002a4:	480b      	ldr	r0, [pc, #44]	@ (80002d4 <main+0x64>)
 80002a6:	f001 fe3f 	bl	8001f28 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_UART_Receive_DMA(&huart2, circBuff1, CIRCULAR_BUFF_MAX_SIZE);
 80002aa:	2280      	movs	r2, #128	@ 0x80
 80002ac:	4905      	ldr	r1, [pc, #20]	@ (80002c4 <main+0x54>)
 80002ae:	4806      	ldr	r0, [pc, #24]	@ (80002c8 <main+0x58>)
 80002b0:	f002 fa2c 	bl	800270c <HAL_UART_Receive_DMA>
	  HAL_UART_Receive_DMA(&huart3, circBuff2, CIRCULAR_BUFF_MAX_SIZE);
 80002b4:	2280      	movs	r2, #128	@ 0x80
 80002b6:	4905      	ldr	r1, [pc, #20]	@ (80002cc <main+0x5c>)
 80002b8:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <main+0x60>)
 80002ba:	f002 fa27 	bl	800270c <HAL_UART_Receive_DMA>
	  HAL_UART_Receive_DMA(&huart2, circBuff1, CIRCULAR_BUFF_MAX_SIZE);
 80002be:	bf00      	nop
 80002c0:	e7f3      	b.n	80002aa <main+0x3a>
 80002c2:	bf00      	nop
 80002c4:	20000030 	.word	0x20000030
 80002c8:	20000290 	.word	0x20000290
 80002cc:	200000b0 	.word	0x200000b0
 80002d0:	200002d8 	.word	0x200002d8
 80002d4:	20000248 	.word	0x20000248

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	@ 0x40
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2228      	movs	r2, #40	@ 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 f8d6 	bl	8003498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fa:	2301      	movs	r3, #1
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000314:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000316:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800031a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4618      	mov	r0, r3
 8000322:	f001 f9a1 	bl	8001668 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800032c:	f000 f97e 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2302      	movs	r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f001 fc0e 	bl	8001b6c <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000356:	f000 f969 	bl	800062c <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3740      	adds	r7, #64	@ 0x40
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <ScanDataLQ>:
		}
	}
	return 0;
}

void ScanDataLQ(int* count, int* leftover, int* status, uint8_t* rxBuff, int* lq, int (*processDataLQ)(int*, int*, uint8_t*, int*)) {
 8000362:	b590      	push	{r4, r7, lr}
 8000364:	b089      	sub	sp, #36	@ 0x24
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
 800036e:	603b      	str	r3, [r7, #0]
    bool flag = false;
 8000370:	2300      	movs	r3, #0
 8000372:	77fb      	strb	r3, [r7, #31]
    int check = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
    while (!flag)
 8000378:	e066      	b.n	8000448 <ScanDataLQ+0xe6>
    {
        if ((*status == 0) || (*status == 1))
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d003      	beq.n	800038a <ScanDataLQ+0x28>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d148      	bne.n	800041c <ScanDataLQ+0xba>
        {
            for (int i = *count; i < CIRCULAR_BUFF_MAX_SIZE; i++)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e038      	b.n	8000404 <ScanDataLQ+0xa2>
            {
                flag = false;
 8000392:	2300      	movs	r3, #0
 8000394:	77fb      	strb	r3, [r7, #31]
                if (rxBuff[i] == CRSF_SYNC)
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2bc8      	cmp	r3, #200	@ 0xc8
 80003a0:	d128      	bne.n	80003f4 <ScanDataLQ+0x92>
                {
                    *count = i;
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	601a      	str	r2, [r3, #0]
                    check = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
                    *status = processDataLQ(count, leftover, rxBuff, lq);
 80003ac:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80003ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80003b0:	683a      	ldr	r2, [r7, #0]
 80003b2:	68b9      	ldr	r1, [r7, #8]
 80003b4:	68f8      	ldr	r0, [r7, #12]
 80003b6:	47a0      	blx	r4
 80003b8:	4602      	mov	r2, r0
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
                    if (*status == 1)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d108      	bne.n	80003d8 <ScanDataLQ+0x76>
                    {
                        *count = 0;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
                        *leftover = 0;
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
                        flag = true;
 80003d2:	2301      	movs	r3, #1
 80003d4:	77fb      	strb	r3, [r7, #31]
 80003d6:	e010      	b.n	80003fa <ScanDataLQ+0x98>
                    }
                    else if (*status == 2)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d105      	bne.n	80003ec <ScanDataLQ+0x8a>
                    {
                        *count = 0;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
                        flag = true;
 80003e6:	2301      	movs	r3, #1
 80003e8:	77fb      	strb	r3, [r7, #31]
                        break;
 80003ea:	e00e      	b.n	800040a <ScanDataLQ+0xa8>
                    }
                    else
                    {
                        *count = 0;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	e002      	b.n	80003fa <ScanDataLQ+0x98>
                    }
                }
                else
                {
                	check++;
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	3301      	adds	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
                }
                flag = true;
 80003fa:	2301      	movs	r3, #1
 80003fc:	77fb      	strb	r3, [r7, #31]
            for (int i = *count; i < CIRCULAR_BUFF_MAX_SIZE; i++)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	3301      	adds	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	2b7f      	cmp	r3, #127	@ 0x7f
 8000408:	ddc3      	ble.n	8000392 <ScanDataLQ+0x30>
            }
            if (check >= (CIRCULAR_BUFF_MAX_SIZE - 3))
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	2b7c      	cmp	r3, #124	@ 0x7c
 800040e:	dd1b      	ble.n	8000448 <ScanDataLQ+0xe6>
            {
            	*lq = 0;
 8000410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
            	check = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
            if (check >= (CIRCULAR_BUFF_MAX_SIZE - 3))
 800041a:	e015      	b.n	8000448 <ScanDataLQ+0xe6>
            }
        }
        else if (*status == 2)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d111      	bne.n	8000448 <ScanDataLQ+0xe6>
        {
            *lq = rxBuff[*leftover - 1];
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	683a      	ldr	r2, [r7, #0]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000434:	601a      	str	r2, [r3, #0]
            flag = false;
 8000436:	2300      	movs	r3, #0
 8000438:	77fb      	strb	r3, [r7, #31]
            *count = *leftover;
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	601a      	str	r2, [r3, #0]
            *status = 0;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
    while (!flag)
 8000448:	7ffb      	ldrb	r3, [r7, #31]
 800044a:	f083 0301 	eor.w	r3, r3, #1
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2b00      	cmp	r3, #0
 8000452:	d192      	bne.n	800037a <ScanDataLQ+0x18>
        }
    }
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	3724      	adds	r7, #36	@ 0x24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd90      	pop	{r4, r7, pc}

0800045e <ProcessDataLQ>:

int ProcessDataLQ(int* count, int* leftover, uint8_t* rxBuff, int* lq)
{
 800045e:	b480      	push	{r7}
 8000460:	b087      	sub	sp, #28
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	603b      	str	r3, [r7, #0]
    int avLen = CIRCULAR_BUFF_MAX_SIZE - *count;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000474:	617b      	str	r3, [r7, #20]
    if (avLen >= 6)
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	2b05      	cmp	r3, #5
 800047a:	dd14      	ble.n	80004a6 <ProcessDataLQ+0x48>
    {
        if (rxBuff[*count + 2] == CRSF_LQ)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3302      	adds	r3, #2
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b14      	cmp	r3, #20
 800048a:	d10a      	bne.n	80004a2 <ProcessDataLQ+0x44>
        {
            *lq = rxBuff[*count + 5];
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3305      	adds	r3, #5
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	601a      	str	r2, [r3, #0]
            return 1;
 800049e:	2301      	movs	r3, #1
 80004a0:	e01a      	b.n	80004d8 <ProcessDataLQ+0x7a>
        }
        else
        {
            return 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	e018      	b.n	80004d8 <ProcessDataLQ+0x7a>
        }
    }
    else if (avLen < 5)
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	2b04      	cmp	r3, #4
 80004aa:	dc14      	bgt.n	80004d6 <ProcessDataLQ+0x78>
    {
        *leftover = 6 - avLen;
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	f1c3 0206 	rsb	r2, r3, #6
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	601a      	str	r2, [r3, #0]
        if (*leftover >= 3)
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	dd0b      	ble.n	80004d6 <ProcessDataLQ+0x78>
        {
            if (rxBuff[*count + 3] == CRSF_LQ)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3303      	adds	r3, #3
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4413      	add	r3, r2
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b14      	cmp	r3, #20
 80004cc:	d101      	bne.n	80004d2 <ProcessDataLQ+0x74>
            {
                return 2;
 80004ce:	2302      	movs	r3, #2
 80004d0:	e002      	b.n	80004d8 <ProcessDataLQ+0x7a>
            }
            else
            {
                return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e000      	b.n	80004d8 <ProcessDataLQ+0x7a>
            }
        }
    }
    return 0;
 80004d6:	2300      	movs	r3, #0
}
 80004d8:	4618      	mov	r0, r3
 80004da:	371c      	adds	r7, #28
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
	...

080004e4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000564 <HAL_UART_RxCpltCallback+0x80>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d117      	bne.n	8000524 <HAL_UART_RxCpltCallback+0x40>
	{
		HAL_UART_Receive_DMA(&huart3, circBuff2, CIRCULAR_BUFF_MAX_SIZE);
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	491c      	ldr	r1, [pc, #112]	@ (8000568 <HAL_UART_RxCpltCallback+0x84>)
 80004f8:	481c      	ldr	r0, [pc, #112]	@ (800056c <HAL_UART_RxCpltCallback+0x88>)
 80004fa:	f002 f907 	bl	800270c <HAL_UART_Receive_DMA>
		memcpy(RxBuff1, circBuff1, CIRCULAR_BUFF_MAX_SIZE);
 80004fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000570 <HAL_UART_RxCpltCallback+0x8c>)
 8000500:	4b1c      	ldr	r3, [pc, #112]	@ (8000574 <HAL_UART_RxCpltCallback+0x90>)
 8000502:	4610      	mov	r0, r2
 8000504:	4619      	mov	r1, r3
 8000506:	2380      	movs	r3, #128	@ 0x80
 8000508:	461a      	mov	r2, r3
 800050a:	f002 fff1 	bl	80034f0 <memcpy>
//		ScanDataLQ1();
		ScanDataLQ(&count1, &leftover1, &STATUS1, RxBuff1, &lq1, ProcessDataLQ);
 800050e:	4b1a      	ldr	r3, [pc, #104]	@ (8000578 <HAL_UART_RxCpltCallback+0x94>)
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <HAL_UART_RxCpltCallback+0x98>)
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <HAL_UART_RxCpltCallback+0x8c>)
 8000518:	4a19      	ldr	r2, [pc, #100]	@ (8000580 <HAL_UART_RxCpltCallback+0x9c>)
 800051a:	491a      	ldr	r1, [pc, #104]	@ (8000584 <HAL_UART_RxCpltCallback+0xa0>)
 800051c:	481a      	ldr	r0, [pc, #104]	@ (8000588 <HAL_UART_RxCpltCallback+0xa4>)
 800051e:	f7ff ff20 	bl	8000362 <ScanDataLQ>
		HAL_UART_Receive_DMA(&huart2, circBuff1, CIRCULAR_BUFF_MAX_SIZE);
		memcpy(RxBuff2, circBuff2, CIRCULAR_BUFF_MAX_SIZE);
//		ScanDataLQ2();
		ScanDataLQ(&count2, &leftover2, &STATUS2, RxBuff2, &lq2, ProcessDataLQ);
	}
}
 8000522:	e01a      	b.n	800055a <HAL_UART_RxCpltCallback+0x76>
	else if (huart == &huart3)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a11      	ldr	r2, [pc, #68]	@ (800056c <HAL_UART_RxCpltCallback+0x88>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d116      	bne.n	800055a <HAL_UART_RxCpltCallback+0x76>
		HAL_UART_Receive_DMA(&huart2, circBuff1, CIRCULAR_BUFF_MAX_SIZE);
 800052c:	2280      	movs	r2, #128	@ 0x80
 800052e:	4911      	ldr	r1, [pc, #68]	@ (8000574 <HAL_UART_RxCpltCallback+0x90>)
 8000530:	480c      	ldr	r0, [pc, #48]	@ (8000564 <HAL_UART_RxCpltCallback+0x80>)
 8000532:	f002 f8eb 	bl	800270c <HAL_UART_Receive_DMA>
		memcpy(RxBuff2, circBuff2, CIRCULAR_BUFF_MAX_SIZE);
 8000536:	4a15      	ldr	r2, [pc, #84]	@ (800058c <HAL_UART_RxCpltCallback+0xa8>)
 8000538:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <HAL_UART_RxCpltCallback+0x84>)
 800053a:	4610      	mov	r0, r2
 800053c:	4619      	mov	r1, r3
 800053e:	2380      	movs	r3, #128	@ 0x80
 8000540:	461a      	mov	r2, r3
 8000542:	f002 ffd5 	bl	80034f0 <memcpy>
		ScanDataLQ(&count2, &leftover2, &STATUS2, RxBuff2, &lq2, ProcessDataLQ);
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <HAL_UART_RxCpltCallback+0x94>)
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <HAL_UART_RxCpltCallback+0xac>)
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <HAL_UART_RxCpltCallback+0xa8>)
 8000550:	4a10      	ldr	r2, [pc, #64]	@ (8000594 <HAL_UART_RxCpltCallback+0xb0>)
 8000552:	4911      	ldr	r1, [pc, #68]	@ (8000598 <HAL_UART_RxCpltCallback+0xb4>)
 8000554:	4811      	ldr	r0, [pc, #68]	@ (800059c <HAL_UART_RxCpltCallback+0xb8>)
 8000556:	f7ff ff04 	bl	8000362 <ScanDataLQ>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000290 	.word	0x20000290
 8000568:	200000b0 	.word	0x200000b0
 800056c:	200002d8 	.word	0x200002d8
 8000570:	20000130 	.word	0x20000130
 8000574:	20000030 	.word	0x20000030
 8000578:	0800045f 	.word	0x0800045f
 800057c:	20000000 	.word	0x20000000
 8000580:	20000240 	.word	0x20000240
 8000584:	20000238 	.word	0x20000238
 8000588:	20000230 	.word	0x20000230
 800058c:	200001b0 	.word	0x200001b0
 8000590:	20000004 	.word	0x20000004
 8000594:	20000244 	.word	0x20000244
 8000598:	2000023c 	.word	0x2000023c
 800059c:	20000234 	.word	0x20000234

080005a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
//	{
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

//		if ((lq1 < 50) || (lq2 < 50))
//		{
	if ((abs(lq1 - lq2) > 5) && ((lq1 < 60) || (lq2 < 60)))
 80005a8:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bfb8      	it	lt
 80005b6:	425b      	neglt	r3, r3
 80005b8:	2b05      	cmp	r3, #5
 80005ba:	dd2a      	ble.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x72>
 80005bc:	4b17      	ldr	r3, [pc, #92]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b3b      	cmp	r3, #59	@ 0x3b
 80005c2:	dd03      	ble.n	80005cc <HAL_TIM_PeriodElapsedCallback+0x2c>
 80005c4:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b3b      	cmp	r3, #59	@ 0x3b
 80005ca:	dc22      	bgt.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		if (lq1 > lq2)
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dd0b      	ble.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	4811      	ldr	r0, [pc, #68]	@ (8000624 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005de:	f001 f82b 	bl	8001638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e8:	480f      	ldr	r0, [pc, #60]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80005ea:	f001 f825 	bl	8001638 <HAL_GPIO_WritePin>
	}
//		}
//	}


}
 80005ee:	e010      	b.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x72>
		else if (lq1 < lq2)
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	da0a      	bge.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x72>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2101      	movs	r1, #1
 8000600:	4808      	ldr	r0, [pc, #32]	@ (8000624 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000602:	f001 f819 	bl	8001638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060c:	4806      	ldr	r0, [pc, #24]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800060e:	f001 f813 	bl	8001638 <HAL_GPIO_WritePin>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	20000004 	.word	0x20000004
 8000624:	40010800 	.word	0x40010800
 8000628:	40011000 	.word	0x40011000

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <Error_Handler+0x8>

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a14      	ldr	r2, [pc, #80]	@ (8000694 <HAL_MspInit+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <HAL_MspInit+0x5c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066e:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <HAL_MspInit+0x60>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <HAL_MspInit+0x60>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <NMI_Handler+0x4>

080006a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <MemManage_Handler+0x4>

080006b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 fa54 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80006f8:	4802      	ldr	r0, [pc, #8]	@ (8000704 <DMA1_Channel3_IRQHandler+0x10>)
 80006fa:	f000 fce5 	bl	80010c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000364 	.word	0x20000364

08000708 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <DMA1_Channel6_IRQHandler+0x10>)
 800070e:	f000 fcdb 	bl	80010c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000320 	.word	0x20000320

0800071c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000720:	4802      	ldr	r0, [pc, #8]	@ (800072c <TIM2_IRQHandler+0x10>)
 8000722:	f001 fc53 	bl	8001fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000248 	.word	0x20000248

08000730 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000734:	4802      	ldr	r0, [pc, #8]	@ (8000740 <USART2_IRQHandler+0x10>)
 8000736:	f002 f80f 	bl	8002758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000290 	.word	0x20000290

08000744 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000748:	4802      	ldr	r0, [pc, #8]	@ (8000754 <USART3_IRQHandler+0x10>)
 800074a:	f002 f805 	bl	8002758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200002d8 	.word	0x200002d8

08000758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_TIM2_Init+0x94>)
 8000782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_TIM2_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_TIM2_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_TIM2_Init+0x94>)
 8000796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800079a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_TIM2_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_TIM2_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a8:	4813      	ldr	r0, [pc, #76]	@ (80007f8 <MX_TIM2_Init+0x94>)
 80007aa:	f001 fb6d 	bl	8001e88 <HAL_TIM_Base_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007b4:	f7ff ff3a 	bl	800062c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	4619      	mov	r1, r3
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_TIM2_Init+0x94>)
 80007c6:	f001 fcf1 	bl	80021ac <HAL_TIM_ConfigClockSource>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007d0:	f7ff ff2c 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_TIM2_Init+0x94>)
 80007e2:	f001 fed3 	bl	800258c <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007ec:	f7ff ff1e 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000248 	.word	0x20000248

080007fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800080c:	d113      	bne.n	8000836 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <HAL_TIM_Base_MspInit+0x44>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0b      	ldr	r2, [pc, #44]	@ (8000840 <HAL_TIM_Base_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_TIM_Base_MspInit+0x44>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	201c      	movs	r0, #28
 800082c:	f000 faa7 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000830:	201c      	movs	r0, #28
 8000832:	f000 fac0 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_USART2_UART_Init+0x48>)
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 420000;
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_USART2_UART_Init+0x48>)
 8000850:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <MX_USART2_UART_Init+0x50>)
 8000852:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_USART2_UART_Init+0x48>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USART2_UART_Init+0x48>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <MX_USART2_UART_Init+0x48>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART2_UART_Init+0x48>)
 8000868:	220c      	movs	r2, #12
 800086a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <MX_USART2_UART_Init+0x48>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART2_UART_Init+0x48>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <MX_USART2_UART_Init+0x48>)
 800087a:	f001 fef7 	bl	800266c <HAL_UART_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000884:	f7ff fed2 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000290 	.word	0x20000290
 8000890:	40004400 	.word	0x40004400
 8000894:	000668a0 	.word	0x000668a0

08000898 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 800089e:	4a11      	ldr	r2, [pc, #68]	@ (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 420000;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 80008a4:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <MX_USART3_UART_Init+0x50>)
 80008a6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 80008bc:	220c      	movs	r2, #12
 80008be:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_USART3_UART_Init+0x48>)
 80008ce:	f001 fecd 	bl	800266c <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80008d8:	f7ff fea8 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200002d8 	.word	0x200002d8
 80008e4:	40004800 	.word	0x40004800
 80008e8:	000668a0 	.word	0x000668a0

080008ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	@ 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a65      	ldr	r2, [pc, #404]	@ (8000a9c <HAL_UART_MspInit+0x1b0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d15e      	bne.n	80009ca <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090c:	4b64      	ldr	r3, [pc, #400]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	4a63      	ldr	r2, [pc, #396]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 8000912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000916:	61d3      	str	r3, [r2, #28]
 8000918:	4b61      	ldr	r3, [pc, #388]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b5e      	ldr	r3, [pc, #376]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a5d      	ldr	r2, [pc, #372]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b5b      	ldr	r3, [pc, #364]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800093c:	2304      	movs	r3, #4
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4619      	mov	r1, r3
 800094e:	4855      	ldr	r0, [pc, #340]	@ (8000aa4 <HAL_UART_MspInit+0x1b8>)
 8000950:	f000 fcee 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000954:	2308      	movs	r3, #8
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4619      	mov	r1, r3
 8000966:	484f      	ldr	r0, [pc, #316]	@ (8000aa4 <HAL_UART_MspInit+0x1b8>)
 8000968:	f000 fce2 	bl	8001330 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800096c:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 800096e:	4a4f      	ldr	r2, [pc, #316]	@ (8000aac <HAL_UART_MspInit+0x1c0>)
 8000970:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000972:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800097e:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000984:	4b48      	ldr	r3, [pc, #288]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098a:	4b47      	ldr	r3, [pc, #284]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000990:	4b45      	ldr	r3, [pc, #276]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000992:	2220      	movs	r2, #32
 8000994:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000996:	4b44      	ldr	r3, [pc, #272]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800099c:	4842      	ldr	r0, [pc, #264]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 800099e:	f000 fa25 	bl	8000dec <HAL_DMA_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80009a8:	f7ff fe40 	bl	800062c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 80009b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009b2:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa8 <HAL_UART_MspInit+0x1bc>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2026      	movs	r0, #38	@ 0x26
 80009be:	f000 f9de 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c2:	2026      	movs	r0, #38	@ 0x26
 80009c4:	f000 f9f7 	bl	8000db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009c8:	e064      	b.n	8000a94 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART3)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a38      	ldr	r2, [pc, #224]	@ (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d15f      	bne.n	8000a94 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d4:	4b32      	ldr	r3, [pc, #200]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	4a31      	ldr	r2, [pc, #196]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 80009da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009de:	61d3      	str	r3, [r2, #28]
 80009e0:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <HAL_UART_MspInit+0x1b4>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0308 	and.w	r3, r3, #8
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4826      	ldr	r0, [pc, #152]	@ (8000ab4 <HAL_UART_MspInit+0x1c8>)
 8000a1a:	f000 fc89 	bl	8001330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4820      	ldr	r0, [pc, #128]	@ (8000ab4 <HAL_UART_MspInit+0x1c8>)
 8000a34:	f000 fc7c 	bl	8001330 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a3a:	4a20      	ldr	r2, [pc, #128]	@ (8000abc <HAL_UART_MspInit+0x1d0>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a5e:	2220      	movs	r2, #32
 8000a60:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000a68:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a6a:	f000 f9bf 	bl	8000dec <HAL_DMA_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000a74:	f7ff fdda 	bl	800062c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2027      	movs	r0, #39	@ 0x27
 8000a8a:	f000 f978 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a8e:	2027      	movs	r0, #39	@ 0x27
 8000a90:	f000 f991 	bl	8000db6 <HAL_NVIC_EnableIRQ>
}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	20000320 	.word	0x20000320
 8000aac:	4002006c 	.word	0x4002006c
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	20000364 	.word	0x20000364
 8000abc:	40020030 	.word	0x40020030

08000ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac0:	f7ff fe4a 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ac6:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8000afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000adc:	4c09      	ldr	r4, [pc, #36]	@ (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f002 fcdd 	bl	80034a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aee:	f7ff fbbf 	bl	8000270 <main>
  bx lr
 8000af2:	4770      	bx	lr
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000afc:	08003558 	.word	0x08003558
  ldr r2, =_sbss
 8000b00:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b04:	200003ac 	.word	0x200003ac

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_Init+0x28>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_Init+0x28>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f923 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fd86 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f93b 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f903 	bl	8000d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000010 	.word	0x20000010
 8000b94:	2000000c 	.word	0x2000000c

08000b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <HAL_IncTick+0x1c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <HAL_IncTick+0x20>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a03      	ldr	r2, [pc, #12]	@ (8000bb8 <HAL_IncTick+0x20>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000010 	.word	0x20000010
 8000bb8:	200003a8 	.word	0x200003a8

08000bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	@ (8000bcc <HAL_GetTick+0x10>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	200003a8 	.word	0x200003a8

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4906      	ldr	r1, [pc, #24]	@ (8000c68 <__NVIC_EnableIRQ+0x34>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	@ (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	@ (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	@ 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f7ff ff90 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff2d 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff42 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff90 	bl	8000cc0 <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5f 	bl	8000c6c <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff35 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffa2 	bl	8000d24 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e043      	b.n	8000e8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <HAL_DMA_Init+0xa8>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a22      	ldr	r2, [pc, #136]	@ (8000e98 <HAL_DMA_Init+0xac>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	009a      	lsls	r2, r3, #2
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e9c <HAL_DMA_Init+0xb0>)
 8000e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000e36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	bffdfff8 	.word	0xbffdfff8
 8000e98:	cccccccd 	.word	0xcccccccd
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <HAL_DMA_Start_IT+0x20>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e04b      	b.n	8000f58 <HAL_DMA_Start_IT+0xb8>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d13a      	bne.n	8000f4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0201 	bic.w	r2, r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 f9eb 	bl	80012d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d008      	beq.n	8000f18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 020e 	orr.w	r2, r2, #14
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e00f      	b.n	8000f38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0204 	bic.w	r2, r2, #4
 8000f26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 020a 	orr.w	r2, r2, #10
 8000f36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e005      	b.n	8000f56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f52:	2302      	movs	r3, #2
 8000f54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d008      	beq.n	8000f8a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e020      	b.n	8000fcc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 020e 	bic.w	r2, r2, #14
 8000f98:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d005      	beq.n	8000ffc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e051      	b.n	80010a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 020e 	bic.w	r2, r2, #14
 800100a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a22      	ldr	r2, [pc, #136]	@ (80010ac <HAL_DMA_Abort_IT+0xd4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d029      	beq.n	800107a <HAL_DMA_Abort_IT+0xa2>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <HAL_DMA_Abort_IT+0xd8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d022      	beq.n	8001076 <HAL_DMA_Abort_IT+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <HAL_DMA_Abort_IT+0xdc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01a      	beq.n	8001070 <HAL_DMA_Abort_IT+0x98>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a1e      	ldr	r2, [pc, #120]	@ (80010b8 <HAL_DMA_Abort_IT+0xe0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d012      	beq.n	800106a <HAL_DMA_Abort_IT+0x92>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <HAL_DMA_Abort_IT+0xe4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00a      	beq.n	8001064 <HAL_DMA_Abort_IT+0x8c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <HAL_DMA_Abort_IT+0xe8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d102      	bne.n	800105e <HAL_DMA_Abort_IT+0x86>
 8001058:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800105c:	e00e      	b.n	800107c <HAL_DMA_Abort_IT+0xa4>
 800105e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001062:	e00b      	b.n	800107c <HAL_DMA_Abort_IT+0xa4>
 8001064:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001068:	e008      	b.n	800107c <HAL_DMA_Abort_IT+0xa4>
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	e005      	b.n	800107c <HAL_DMA_Abort_IT+0xa4>
 8001070:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001074:	e002      	b.n	800107c <HAL_DMA_Abort_IT+0xa4>
 8001076:	2310      	movs	r3, #16
 8001078:	e000      	b.n	800107c <HAL_DMA_Abort_IT+0xa4>
 800107a:	2301      	movs	r3, #1
 800107c:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <HAL_DMA_Abort_IT+0xec>)
 800107e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	4798      	blx	r3
    } 
  }
  return status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020008 	.word	0x40020008
 80010b0:	4002001c 	.word	0x4002001c
 80010b4:	40020030 	.word	0x40020030
 80010b8:	40020044 	.word	0x40020044
 80010bc:	40020058 	.word	0x40020058
 80010c0:	4002006c 	.word	0x4002006c
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	2204      	movs	r2, #4
 80010e6:	409a      	lsls	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d04f      	beq.n	8001190 <HAL_DMA_IRQHandler+0xc8>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d04a      	beq.n	8001190 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0204 	bic.w	r2, r2, #4
 8001116:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a66      	ldr	r2, [pc, #408]	@ (80012b8 <HAL_DMA_IRQHandler+0x1f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d029      	beq.n	8001176 <HAL_DMA_IRQHandler+0xae>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a65      	ldr	r2, [pc, #404]	@ (80012bc <HAL_DMA_IRQHandler+0x1f4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d022      	beq.n	8001172 <HAL_DMA_IRQHandler+0xaa>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a63      	ldr	r2, [pc, #396]	@ (80012c0 <HAL_DMA_IRQHandler+0x1f8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01a      	beq.n	800116c <HAL_DMA_IRQHandler+0xa4>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a62      	ldr	r2, [pc, #392]	@ (80012c4 <HAL_DMA_IRQHandler+0x1fc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d012      	beq.n	8001166 <HAL_DMA_IRQHandler+0x9e>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a60      	ldr	r2, [pc, #384]	@ (80012c8 <HAL_DMA_IRQHandler+0x200>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00a      	beq.n	8001160 <HAL_DMA_IRQHandler+0x98>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a5f      	ldr	r2, [pc, #380]	@ (80012cc <HAL_DMA_IRQHandler+0x204>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d102      	bne.n	800115a <HAL_DMA_IRQHandler+0x92>
 8001154:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001158:	e00e      	b.n	8001178 <HAL_DMA_IRQHandler+0xb0>
 800115a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800115e:	e00b      	b.n	8001178 <HAL_DMA_IRQHandler+0xb0>
 8001160:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001164:	e008      	b.n	8001178 <HAL_DMA_IRQHandler+0xb0>
 8001166:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800116a:	e005      	b.n	8001178 <HAL_DMA_IRQHandler+0xb0>
 800116c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001170:	e002      	b.n	8001178 <HAL_DMA_IRQHandler+0xb0>
 8001172:	2340      	movs	r3, #64	@ 0x40
 8001174:	e000      	b.n	8001178 <HAL_DMA_IRQHandler+0xb0>
 8001176:	2304      	movs	r3, #4
 8001178:	4a55      	ldr	r2, [pc, #340]	@ (80012d0 <HAL_DMA_IRQHandler+0x208>)
 800117a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8094 	beq.w	80012ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800118e:	e08e      	b.n	80012ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	2202      	movs	r2, #2
 8001196:	409a      	lsls	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d056      	beq.n	800124e <HAL_DMA_IRQHandler+0x186>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d051      	beq.n	800124e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10b      	bne.n	80011d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 020a 	bic.w	r2, r2, #10
 80011c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a38      	ldr	r2, [pc, #224]	@ (80012b8 <HAL_DMA_IRQHandler+0x1f0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d029      	beq.n	800122e <HAL_DMA_IRQHandler+0x166>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a37      	ldr	r2, [pc, #220]	@ (80012bc <HAL_DMA_IRQHandler+0x1f4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d022      	beq.n	800122a <HAL_DMA_IRQHandler+0x162>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a35      	ldr	r2, [pc, #212]	@ (80012c0 <HAL_DMA_IRQHandler+0x1f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01a      	beq.n	8001224 <HAL_DMA_IRQHandler+0x15c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a34      	ldr	r2, [pc, #208]	@ (80012c4 <HAL_DMA_IRQHandler+0x1fc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d012      	beq.n	800121e <HAL_DMA_IRQHandler+0x156>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a32      	ldr	r2, [pc, #200]	@ (80012c8 <HAL_DMA_IRQHandler+0x200>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00a      	beq.n	8001218 <HAL_DMA_IRQHandler+0x150>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a31      	ldr	r2, [pc, #196]	@ (80012cc <HAL_DMA_IRQHandler+0x204>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d102      	bne.n	8001212 <HAL_DMA_IRQHandler+0x14a>
 800120c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001210:	e00e      	b.n	8001230 <HAL_DMA_IRQHandler+0x168>
 8001212:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001216:	e00b      	b.n	8001230 <HAL_DMA_IRQHandler+0x168>
 8001218:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800121c:	e008      	b.n	8001230 <HAL_DMA_IRQHandler+0x168>
 800121e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001222:	e005      	b.n	8001230 <HAL_DMA_IRQHandler+0x168>
 8001224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001228:	e002      	b.n	8001230 <HAL_DMA_IRQHandler+0x168>
 800122a:	2320      	movs	r3, #32
 800122c:	e000      	b.n	8001230 <HAL_DMA_IRQHandler+0x168>
 800122e:	2302      	movs	r3, #2
 8001230:	4a27      	ldr	r2, [pc, #156]	@ (80012d0 <HAL_DMA_IRQHandler+0x208>)
 8001232:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001240:	2b00      	cmp	r3, #0
 8001242:	d034      	beq.n	80012ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800124c:	e02f      	b.n	80012ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	2208      	movs	r2, #8
 8001254:	409a      	lsls	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d028      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x1e8>
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d023      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 020e 	bic.w	r2, r2, #14
 8001276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001280:	2101      	movs	r1, #1
 8001282:	fa01 f202 	lsl.w	r2, r1, r2
 8001286:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	4798      	blx	r3
    }
  }
  return;
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
}
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020008 	.word	0x40020008
 80012bc:	4002001c 	.word	0x4002001c
 80012c0:	40020030 	.word	0x40020030
 80012c4:	40020044 	.word	0x40020044
 80012c8:	40020058 	.word	0x40020058
 80012cc:	4002006c 	.word	0x4002006c
 80012d0:	40020000 	.word	0x40020000

080012d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d108      	bne.n	8001314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001312:	e007      	b.n	8001324 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	60da      	str	r2, [r3, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b08b      	sub	sp, #44	@ 0x2c
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	e169      	b.n	8001618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001344:	2201      	movs	r2, #1
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 8158 	bne.w	8001612 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a9a      	ldr	r2, [pc, #616]	@ (80015d0 <HAL_GPIO_Init+0x2a0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d05e      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 800136c:	4a98      	ldr	r2, [pc, #608]	@ (80015d0 <HAL_GPIO_Init+0x2a0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d875      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 8001372:	4a98      	ldr	r2, [pc, #608]	@ (80015d4 <HAL_GPIO_Init+0x2a4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d058      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001378:	4a96      	ldr	r2, [pc, #600]	@ (80015d4 <HAL_GPIO_Init+0x2a4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d86f      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 800137e:	4a96      	ldr	r2, [pc, #600]	@ (80015d8 <HAL_GPIO_Init+0x2a8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d052      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001384:	4a94      	ldr	r2, [pc, #592]	@ (80015d8 <HAL_GPIO_Init+0x2a8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d869      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 800138a:	4a94      	ldr	r2, [pc, #592]	@ (80015dc <HAL_GPIO_Init+0x2ac>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d04c      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001390:	4a92      	ldr	r2, [pc, #584]	@ (80015dc <HAL_GPIO_Init+0x2ac>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d863      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 8001396:	4a92      	ldr	r2, [pc, #584]	@ (80015e0 <HAL_GPIO_Init+0x2b0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d046      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 800139c:	4a90      	ldr	r2, [pc, #576]	@ (80015e0 <HAL_GPIO_Init+0x2b0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d85d      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d82a      	bhi.n	80013fc <HAL_GPIO_Init+0xcc>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d859      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 80013aa:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <HAL_GPIO_Init+0x80>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	0800142b 	.word	0x0800142b
 80013b4:	08001405 	.word	0x08001405
 80013b8:	08001417 	.word	0x08001417
 80013bc:	08001459 	.word	0x08001459
 80013c0:	0800145f 	.word	0x0800145f
 80013c4:	0800145f 	.word	0x0800145f
 80013c8:	0800145f 	.word	0x0800145f
 80013cc:	0800145f 	.word	0x0800145f
 80013d0:	0800145f 	.word	0x0800145f
 80013d4:	0800145f 	.word	0x0800145f
 80013d8:	0800145f 	.word	0x0800145f
 80013dc:	0800145f 	.word	0x0800145f
 80013e0:	0800145f 	.word	0x0800145f
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	0800145f 	.word	0x0800145f
 80013ec:	0800145f 	.word	0x0800145f
 80013f0:	0800145f 	.word	0x0800145f
 80013f4:	0800140d 	.word	0x0800140d
 80013f8:	08001421 	.word	0x08001421
 80013fc:	4a79      	ldr	r2, [pc, #484]	@ (80015e4 <HAL_GPIO_Init+0x2b4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001402:	e02c      	b.n	800145e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	623b      	str	r3, [r7, #32]
          break;
 800140a:	e029      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	3304      	adds	r3, #4
 8001412:	623b      	str	r3, [r7, #32]
          break;
 8001414:	e024      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	3308      	adds	r3, #8
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e01f      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	330c      	adds	r3, #12
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e01a      	b.n	8001460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001432:	2304      	movs	r3, #4
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e013      	b.n	8001460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001440:	2308      	movs	r3, #8
 8001442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	611a      	str	r2, [r3, #16]
          break;
 800144a:	e009      	b.n	8001460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800144c:	2308      	movs	r3, #8
 800144e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	615a      	str	r2, [r3, #20]
          break;
 8001456:	e003      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x130>
          break;
 800145e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2bff      	cmp	r3, #255	@ 0xff
 8001464:	d801      	bhi.n	800146a <HAL_GPIO_Init+0x13a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	e001      	b.n	800146e <HAL_GPIO_Init+0x13e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3304      	adds	r3, #4
 800146e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2bff      	cmp	r3, #255	@ 0xff
 8001474:	d802      	bhi.n	800147c <HAL_GPIO_Init+0x14c>
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x152>
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	3b08      	subs	r3, #8
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	210f      	movs	r1, #15
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	6a39      	ldr	r1, [r7, #32]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	431a      	orrs	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80b1 	beq.w	8001612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b0:	4b4d      	ldr	r3, [pc, #308]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c8:	4a48      	ldr	r2, [pc, #288]	@ (80015ec <HAL_GPIO_Init+0x2bc>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a40      	ldr	r2, [pc, #256]	@ (80015f0 <HAL_GPIO_Init+0x2c0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d013      	beq.n	800151c <HAL_GPIO_Init+0x1ec>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3f      	ldr	r2, [pc, #252]	@ (80015f4 <HAL_GPIO_Init+0x2c4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00d      	beq.n	8001518 <HAL_GPIO_Init+0x1e8>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3e      	ldr	r2, [pc, #248]	@ (80015f8 <HAL_GPIO_Init+0x2c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x1e4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3d      	ldr	r2, [pc, #244]	@ (80015fc <HAL_GPIO_Init+0x2cc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_GPIO_Init+0x1e0>
 800150c:	2303      	movs	r3, #3
 800150e:	e006      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001510:	2304      	movs	r3, #4
 8001512:	e004      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001514:	2302      	movs	r3, #2
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 800151c:	2300      	movs	r3, #0
 800151e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001520:	f002 0203 	and.w	r2, r2, #3
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	4093      	lsls	r3, r2
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800152e:	492f      	ldr	r1, [pc, #188]	@ (80015ec <HAL_GPIO_Init+0x2bc>)
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001548:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	492c      	ldr	r1, [pc, #176]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	43db      	mvns	r3, r3
 800155e:	4928      	ldr	r1, [pc, #160]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001560:	4013      	ands	r3, r2
 8001562:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001570:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	4922      	ldr	r1, [pc, #136]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	60cb      	str	r3, [r1, #12]
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	43db      	mvns	r3, r3
 8001586:	491e      	ldr	r1, [pc, #120]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001588:	4013      	ands	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4918      	ldr	r1, [pc, #96]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4914      	ldr	r1, [pc, #80]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d021      	beq.n	8001604 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	490e      	ldr	r1, [pc, #56]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e021      	b.n	8001612 <HAL_GPIO_Init+0x2e2>
 80015ce:	bf00      	nop
 80015d0:	10320000 	.word	0x10320000
 80015d4:	10310000 	.word	0x10310000
 80015d8:	10220000 	.word	0x10220000
 80015dc:	10210000 	.word	0x10210000
 80015e0:	10120000 	.word	0x10120000
 80015e4:	10110000 	.word	0x10110000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	40011000 	.word	0x40011000
 80015fc:	40011400 	.word	0x40011400
 8001600:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_GPIO_Init+0x304>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	43db      	mvns	r3, r3
 800160c:	4909      	ldr	r1, [pc, #36]	@ (8001634 <HAL_GPIO_Init+0x304>)
 800160e:	4013      	ands	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	3301      	adds	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	f47f ae8e 	bne.w	8001344 <HAL_GPIO_Init+0x14>
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	372c      	adds	r7, #44	@ 0x2c
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	611a      	str	r2, [r3, #16]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e272      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8087 	beq.w	8001796 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001688:	4b92      	ldr	r3, [pc, #584]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b04      	cmp	r3, #4
 8001692:	d00c      	beq.n	80016ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001694:	4b8f      	ldr	r3, [pc, #572]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	d112      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5e>
 80016a0:	4b8c      	ldr	r3, [pc, #560]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ac:	d10b      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ae:	4b89      	ldr	r3, [pc, #548]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d06c      	beq.n	8001794 <HAL_RCC_OscConfig+0x12c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d168      	bne.n	8001794 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e24c      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x76>
 80016d0:	4b80      	ldr	r3, [pc, #512]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a7f      	ldr	r2, [pc, #508]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	e02e      	b.n	800173c <HAL_RCC_OscConfig+0xd4>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x98>
 80016e6:	4b7b      	ldr	r3, [pc, #492]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a7a      	ldr	r2, [pc, #488]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b78      	ldr	r3, [pc, #480]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a77      	ldr	r2, [pc, #476]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e01d      	b.n	800173c <HAL_RCC_OscConfig+0xd4>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0xbc>
 800170a:	4b72      	ldr	r3, [pc, #456]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a71      	ldr	r2, [pc, #452]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b6f      	ldr	r3, [pc, #444]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6e      	ldr	r2, [pc, #440]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0xd4>
 8001724:	4b6b      	ldr	r3, [pc, #428]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a6a      	ldr	r2, [pc, #424]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b68      	ldr	r3, [pc, #416]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a67      	ldr	r2, [pc, #412]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800173a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fa3a 	bl	8000bbc <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fa36 	bl	8000bbc <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e200      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b5d      	ldr	r3, [pc, #372]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0xe4>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fa26 	bl	8000bbc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fa22 	bl	8000bbc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	@ 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1ec      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x10c>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d063      	beq.n	800186a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a2:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00b      	beq.n	80017c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ae:	4b49      	ldr	r3, [pc, #292]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d11c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x18c>
 80017ba:	4b46      	ldr	r3, [pc, #280]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d116      	bne.n	80017f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	4b43      	ldr	r3, [pc, #268]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x176>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e1c0      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017de:	4b3d      	ldr	r3, [pc, #244]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4939      	ldr	r1, [pc, #228]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	e03a      	b.n	800186a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fc:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <HAL_RCC_OscConfig+0x270>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff f9db 	bl	8000bbc <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff f9d7 	bl	8000bbc <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1a1      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4927      	ldr	r1, [pc, #156]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <HAL_RCC_OscConfig+0x270>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff f9ba 	bl	8000bbc <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff f9b6 	bl	8000bbc <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e180      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03a      	beq.n	80018ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d019      	beq.n	80018b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_RCC_OscConfig+0x274>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7ff f99a 	bl	8000bbc <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff f996 	bl	8000bbc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e160      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f000 face 	bl	8001e4c <RCC_Delay>
 80018b0:	e01c      	b.n	80018ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_RCC_OscConfig+0x274>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b8:	f7ff f980 	bl	8000bbc <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018be:	e00f      	b.n	80018e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff f97c 	bl	8000bbc <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d908      	bls.n	80018e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e146      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	42420000 	.word	0x42420000
 80018dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	4b92      	ldr	r3, [pc, #584]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e9      	bne.n	80018c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a6 	beq.w	8001a46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10d      	bne.n	8001926 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b88      	ldr	r3, [pc, #544]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a87      	ldr	r2, [pc, #540]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b85      	ldr	r3, [pc, #532]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001926:	4b82      	ldr	r3, [pc, #520]	@ (8001b30 <HAL_RCC_OscConfig+0x4c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001932:	4b7f      	ldr	r3, [pc, #508]	@ (8001b30 <HAL_RCC_OscConfig+0x4c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7e      	ldr	r2, [pc, #504]	@ (8001b30 <HAL_RCC_OscConfig+0x4c8>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193e:	f7ff f93d 	bl	8000bbc <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001946:	f7ff f939 	bl	8000bbc <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b64      	cmp	r3, #100	@ 0x64
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e103      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	4b75      	ldr	r3, [pc, #468]	@ (8001b30 <HAL_RCC_OscConfig+0x4c8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x312>
 800196c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a6e      	ldr	r2, [pc, #440]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	e02d      	b.n	80019d6 <HAL_RCC_OscConfig+0x36e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x334>
 8001982:	4b6a      	ldr	r3, [pc, #424]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a69      	ldr	r2, [pc, #420]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	4b67      	ldr	r3, [pc, #412]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a66      	ldr	r2, [pc, #408]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	e01c      	b.n	80019d6 <HAL_RCC_OscConfig+0x36e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d10c      	bne.n	80019be <HAL_RCC_OscConfig+0x356>
 80019a4:	4b61      	ldr	r3, [pc, #388]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a60      	ldr	r2, [pc, #384]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	e00b      	b.n	80019d6 <HAL_RCC_OscConfig+0x36e>
 80019be:	4b5b      	ldr	r3, [pc, #364]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6213      	str	r3, [r2, #32]
 80019ca:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a57      	ldr	r2, [pc, #348]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f023 0304 	bic.w	r3, r3, #4
 80019d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d015      	beq.n	8001a0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7ff f8ed 	bl	8000bbc <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff f8e9 	bl	8000bbc <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0b1      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	4b4b      	ldr	r3, [pc, #300]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ee      	beq.n	80019e6 <HAL_RCC_OscConfig+0x37e>
 8001a08:	e014      	b.n	8001a34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f8d7 	bl	8000bbc <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff f8d3 	bl	8000bbc <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e09b      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1ee      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d105      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8087 	beq.w	8001b5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d061      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d146      	bne.n	8001af2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a64:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <HAL_RCC_OscConfig+0x4cc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f8a7 	bl	8000bbc <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff f8a3 	bl	8000bbc <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e06d      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a84:	4b29      	ldr	r3, [pc, #164]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a98:	d108      	bne.n	8001aac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a9a:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	4921      	ldr	r1, [pc, #132]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a19      	ldr	r1, [r3, #32]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	430b      	orrs	r3, r1
 8001abe:	491b      	ldr	r1, [pc, #108]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <HAL_RCC_OscConfig+0x4cc>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff f877 	bl	8000bbc <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff f873 	bl	8000bbc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e03d      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x46a>
 8001af0:	e035      	b.n	8001b5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <HAL_RCC_OscConfig+0x4cc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f860 	bl	8000bbc <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f85c 	bl	8000bbc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e026      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x498>
 8001b1e:	e01e      	b.n	8001b5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e019      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40007000 	.word	0x40007000
 8001b34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_OscConfig+0x500>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0d0      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b67      	ldr	r3, [pc, #412]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4965      	ldr	r1, [pc, #404]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b63      	ldr	r3, [pc, #396]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b8      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b59      	ldr	r3, [pc, #356]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a58      	ldr	r2, [pc, #352]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a52      	ldr	r2, [pc, #328]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b50      	ldr	r3, [pc, #320]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	494d      	ldr	r1, [pc, #308]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d040      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d115      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2a:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e073      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e06b      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4a:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4936      	ldr	r1, [pc, #216]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c5c:	f7fe ffae 	bl	8000bbc <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c64:	f7fe ffaa 	bl	8000bbc <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e053      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 020c 	and.w	r2, r3, #12
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1eb      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d210      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4922      	ldr	r1, [pc, #136]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e032      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4916      	ldr	r1, [pc, #88]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	490e      	ldr	r1, [pc, #56]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfa:	f000 f821 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	490a      	ldr	r1, [pc, #40]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <HAL_RCC_ClockConfig+0x1cc>)
 8001d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_ClockConfig+0x1d0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ff0c 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08003524 	.word	0x08003524
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	2000000c 	.word	0x2000000c

08001d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x30>
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x36>
 8001d6e:	e027      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d72:	613b      	str	r3, [r7, #16]
      break;
 8001d74:	e027      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	4a17      	ldr	r2, [pc, #92]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d010      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	0c5b      	lsrs	r3, r3, #17
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001da2:	fb03 f202 	mul.w	r2, r3, r2
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e004      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a0c      	ldr	r2, [pc, #48]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001db4:	fb02 f303 	mul.w	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	613b      	str	r3, [r7, #16]
      break;
 8001dbe:	e002      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dc2:	613b      	str	r3, [r7, #16]
      break;
 8001dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc6:	693b      	ldr	r3, [r7, #16]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	007a1200 	.word	0x007a1200
 8001ddc:	0800353c 	.word	0x0800353c
 8001de0:	0800354c 	.word	0x0800354c
 8001de4:	003d0900 	.word	0x003d0900

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b02      	ldr	r3, [pc, #8]	@ (8001df8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	20000008 	.word	0x20000008

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e00:	f7ff fff2 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4903      	ldr	r1, [pc, #12]	@ (8001e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08003534 	.word	0x08003534

08001e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0adb      	lsrs	r3, r3, #11
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	4903      	ldr	r1, [pc, #12]	@ (8001e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08003534 	.word	0x08003534

08001e4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e54:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <RCC_Delay+0x34>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <RCC_Delay+0x38>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0a5b      	lsrs	r3, r3, #9
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e68:	bf00      	nop
  }
  while (Delay --);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1e5a      	subs	r2, r3, #1
 8001e6e:	60fa      	str	r2, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f9      	bne.n	8001e68 <RCC_Delay+0x1c>
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000008 	.word	0x20000008
 8001e84:	10624dd3 	.word	0x10624dd3

08001e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e041      	b.n	8001f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fca4 	bl	80007fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f000 fa5c 	bl	8002384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e03a      	b.n	8001fb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a18      	ldr	r2, [pc, #96]	@ (8001fc0 <HAL_TIM_Base_Start_IT+0x98>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00e      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x58>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f6a:	d009      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x58>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a14      	ldr	r2, [pc, #80]	@ (8001fc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x58>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a13      	ldr	r2, [pc, #76]	@ (8001fc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d010      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	e007      	b.n	8001fb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40000800 	.word	0x40000800

08001fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d020      	beq.n	8002030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0202 	mvn.w	r2, #2
 8002000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f998 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f98b 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f99a 	bl	800235e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d020      	beq.n	800207c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01b      	beq.n	800207c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0204 	mvn.w	r2, #4
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f972 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f965 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f974 	bl	800235e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d020      	beq.n	80020c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0208 	mvn.w	r2, #8
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2204      	movs	r2, #4
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f94c 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f93f 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f94e 	bl	800235e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d020      	beq.n	8002114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01b      	beq.n	8002114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0210 	mvn.w	r2, #16
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2208      	movs	r2, #8
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f926 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f919 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f928 	bl	800235e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0201 	mvn.w	r2, #1
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fa34 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa7f 	bl	800265a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8f8 	bl	8002370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0220 	mvn.w	r2, #32
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa52 	bl	8002648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_TIM_ConfigClockSource+0x1c>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0b4      	b.n	8002332 <HAL_TIM_ConfigClockSource+0x186>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002200:	d03e      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0xd4>
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002206:	f200 8087 	bhi.w	8002318 <HAL_TIM_ConfigClockSource+0x16c>
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800220e:	f000 8086 	beq.w	800231e <HAL_TIM_ConfigClockSource+0x172>
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002216:	d87f      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x16c>
 8002218:	2b70      	cmp	r3, #112	@ 0x70
 800221a:	d01a      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0xa6>
 800221c:	2b70      	cmp	r3, #112	@ 0x70
 800221e:	d87b      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x16c>
 8002220:	2b60      	cmp	r3, #96	@ 0x60
 8002222:	d050      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002224:	2b60      	cmp	r3, #96	@ 0x60
 8002226:	d877      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x16c>
 8002228:	2b50      	cmp	r3, #80	@ 0x50
 800222a:	d03c      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0xfa>
 800222c:	2b50      	cmp	r3, #80	@ 0x50
 800222e:	d873      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x16c>
 8002230:	2b40      	cmp	r3, #64	@ 0x40
 8002232:	d058      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002234:	2b40      	cmp	r3, #64	@ 0x40
 8002236:	d86f      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x16c>
 8002238:	2b30      	cmp	r3, #48	@ 0x30
 800223a:	d064      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x15a>
 800223c:	2b30      	cmp	r3, #48	@ 0x30
 800223e:	d86b      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x16c>
 8002240:	2b20      	cmp	r3, #32
 8002242:	d060      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x15a>
 8002244:	2b20      	cmp	r3, #32
 8002246:	d867      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x16c>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d05c      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x15a>
 800224c:	2b10      	cmp	r3, #16
 800224e:	d05a      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x15a>
 8002250:	e062      	b.n	8002318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002262:	f000 f974 	bl	800254e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	609a      	str	r2, [r3, #8]
      break;
 800227e:	e04f      	b.n	8002320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002290:	f000 f95d 	bl	800254e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022a2:	609a      	str	r2, [r3, #8]
      break;
 80022a4:	e03c      	b.n	8002320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b2:	461a      	mov	r2, r3
 80022b4:	f000 f8d4 	bl	8002460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2150      	movs	r1, #80	@ 0x50
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f92b 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 80022c4:	e02c      	b.n	8002320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022d2:	461a      	mov	r2, r3
 80022d4:	f000 f8f2 	bl	80024bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2160      	movs	r1, #96	@ 0x60
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f91b 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 80022e4:	e01c      	b.n	8002320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f2:	461a      	mov	r2, r3
 80022f4:	f000 f8b4 	bl	8002460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2140      	movs	r1, #64	@ 0x40
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f90b 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 8002304:	e00c      	b.n	8002320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f000 f902 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 8002316:	e003      	b.n	8002320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      break;
 800231c:	e000      	b.n	8002320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800231e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
	...

08002384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a2f      	ldr	r2, [pc, #188]	@ (8002454 <TIM_Base_SetConfig+0xd0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00b      	beq.n	80023b4 <TIM_Base_SetConfig+0x30>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023a2:	d007      	beq.n	80023b4 <TIM_Base_SetConfig+0x30>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002458 <TIM_Base_SetConfig+0xd4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d003      	beq.n	80023b4 <TIM_Base_SetConfig+0x30>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a2b      	ldr	r2, [pc, #172]	@ (800245c <TIM_Base_SetConfig+0xd8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d108      	bne.n	80023c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <TIM_Base_SetConfig+0xd0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00b      	beq.n	80023e6 <TIM_Base_SetConfig+0x62>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d4:	d007      	beq.n	80023e6 <TIM_Base_SetConfig+0x62>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002458 <TIM_Base_SetConfig+0xd4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d003      	beq.n	80023e6 <TIM_Base_SetConfig+0x62>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1e      	ldr	r2, [pc, #120]	@ (800245c <TIM_Base_SetConfig+0xd8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d108      	bne.n	80023f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a0d      	ldr	r2, [pc, #52]	@ (8002454 <TIM_Base_SetConfig+0xd0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f023 0201 	bic.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	611a      	str	r2, [r3, #16]
  }
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800

08002460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f023 0201 	bic.w	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800248a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 030a 	bic.w	r3, r3, #10
 800249c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	621a      	str	r2, [r3, #32]
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f023 0210 	bic.w	r2, r3, #16
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	031b      	lsls	r3, r3, #12
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	621a      	str	r2, [r3, #32]
}
 8002510:	bf00      	nop
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	f043 0307 	orr.w	r3, r3, #7
 800253c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800254e:	b480      	push	{r7}
 8002550:	b087      	sub	sp, #28
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002568:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	431a      	orrs	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4313      	orrs	r3, r2
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	609a      	str	r2, [r3, #8]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e046      	b.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a16      	ldr	r2, [pc, #88]	@ (800263c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f0:	d009      	beq.n	8002606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a10      	ldr	r2, [pc, #64]	@ (8002644 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10c      	bne.n	8002620 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800260c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	4313      	orrs	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800

08002648 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e042      	b.n	8002704 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe f92a 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	@ 0x24
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fe63 	bl	800337c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	d112      	bne.n	800274c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_UART_Receive_DMA+0x26>
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e00b      	b.n	800274e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	461a      	mov	r2, r3
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fbbe 	bl	8002ec4 <UART_Start_Receive_DMA>
 8002748:	4603      	mov	r3, r0
 800274a:	e000      	b.n	800274e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b0ba      	sub	sp, #232	@ 0xe8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_UART_IRQHandler+0x66>
 80027aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fd22 	bl	8003200 <UART_Receive_IT>
      return;
 80027bc:	e25b      	b.n	8002c76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80de 	beq.w	8002984 <HAL_UART_IRQHandler+0x22c>
 80027c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80d1 	beq.w	8002984 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_UART_IRQHandler+0xae>
 80027ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_UART_IRQHandler+0xd2>
 8002812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800282a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_UART_IRQHandler+0xf6>
 8002836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	f043 0204 	orr.w	r2, r3, #4
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d011      	beq.n	800287e <HAL_UART_IRQHandler+0x126>
 800285a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	f043 0208 	orr.w	r2, r3, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 81f2 	beq.w	8002c6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_UART_IRQHandler+0x14e>
 8002894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fcad 	bl	8003200 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_UART_IRQHandler+0x17a>
 80028ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d04f      	beq.n	8002972 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fbb7 	bl	8003046 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d041      	beq.n	800296a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3314      	adds	r3, #20
 80028ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028f4:	e853 3f00 	ldrex	r3, [r3]
 80028f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3314      	adds	r3, #20
 800290e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800291e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800292a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1d9      	bne.n	80028e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d013      	beq.n	8002962 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b38 <HAL_UART_IRQHandler+0x3e0>)
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fb46 	bl	8000fd8 <HAL_DMA_Abort_IT>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800295c:	4610      	mov	r0, r2
 800295e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002960:	e00e      	b.n	8002980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f99c 	bl	8002ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002968:	e00a      	b.n	8002980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f998 	bl	8002ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002970:	e006      	b.n	8002980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f994 	bl	8002ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800297e:	e175      	b.n	8002c6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	bf00      	nop
    return;
 8002982:	e173      	b.n	8002c6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	2b01      	cmp	r3, #1
 800298a:	f040 814f 	bne.w	8002c2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8148 	beq.w	8002c2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800299c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8141 	beq.w	8002c2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80b6 	beq.w	8002b3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8145 	beq.w	8002c70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029ee:	429a      	cmp	r2, r3
 80029f0:	f080 813e 	bcs.w	8002c70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	f000 8088 	beq.w	8002b18 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a34:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1d9      	bne.n	8002a08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3314      	adds	r3, #20
 8002a5a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a5e:	e853 3f00 	ldrex	r3, [r3]
 8002a62:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3314      	adds	r3, #20
 8002a74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a78:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a84:	e841 2300 	strex	r3, r2, [r1]
 8002a88:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e1      	bne.n	8002a54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3314      	adds	r3, #20
 8002a96:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002aa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3314      	adds	r3, #20
 8002ab0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ab4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002aba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ac2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e3      	bne.n	8002a90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	330c      	adds	r3, #12
 8002adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae0:	e853 3f00 	ldrex	r3, [r3]
 8002ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ae8:	f023 0310 	bic.w	r3, r3, #16
 8002aec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002afa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002afc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b02:	e841 2300 	strex	r3, r2, [r1]
 8002b06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e3      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fa24 	bl	8000f60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8bf 	bl	8002cb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b34:	e09c      	b.n	8002c70 <HAL_UART_IRQHandler+0x518>
 8002b36:	bf00      	nop
 8002b38:	0800310b 	.word	0x0800310b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 808e 	beq.w	8002c74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8089 	beq.w	8002c74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b86:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e3      	bne.n	8002b62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3314      	adds	r3, #20
 8002bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e3      	bne.n	8002b9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0310 	bic.w	r3, r3, #16
 8002bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c04:	61fa      	str	r2, [r7, #28]
 8002c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	69b9      	ldr	r1, [r7, #24]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	617b      	str	r3, [r7, #20]
   return(result);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e3      	bne.n	8002be0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f844 	bl	8002cb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c2a:	e023      	b.n	8002c74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_UART_IRQHandler+0x4f4>
 8002c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fa74 	bl	8003132 <UART_Transmit_IT>
    return;
 8002c4a:	e014      	b.n	8002c76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <HAL_UART_IRQHandler+0x51e>
 8002c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fab3 	bl	80031d0 <UART_EndTransmit_IT>
    return;
 8002c6a:	e004      	b.n	8002c76 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c6c:	bf00      	nop
 8002c6e:	e002      	b.n	8002c76 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c74:	bf00      	nop
  }
}
 8002c76:	37e8      	adds	r7, #232	@ 0xe8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b09c      	sub	sp, #112	@ 0x70
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d172      	bne.n	8002dca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d0c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e5      	bne.n	8002cea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3314      	adds	r3, #20
 8002d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3314      	adds	r3, #20
 8002d3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002d3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3314      	adds	r3, #20
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	623b      	str	r3, [r7, #32]
   return(result);
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d68:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d72:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e5      	bne.n	8002d52 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d119      	bne.n	8002dca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f023 0310 	bic.w	r3, r3, #16
 8002dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002db6:	61fa      	str	r2, [r7, #28]
 8002db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e5      	bne.n	8002d96 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dcc:	2200      	movs	r2, #0
 8002dce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d106      	bne.n	8002de6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002de0:	f7ff ff67 	bl	8002cb2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002de4:	e002      	b.n	8002dec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002de6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002de8:	f7fd fb7c 	bl	80004e4 <HAL_UART_RxCpltCallback>
}
 8002dec:	bf00      	nop
 8002dee:	3770      	adds	r7, #112	@ 0x70
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4619      	mov	r1, r3
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff ff49 	bl	8002cb2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e20:	e002      	b.n	8002e28 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff ff33 	bl	8002c8e <HAL_UART_RxHalfCpltCallback>
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b21      	cmp	r3, #33	@ 0x21
 8002e62:	d108      	bne.n	8002e76 <UART_DMAError+0x46>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002e70:	68b8      	ldr	r0, [r7, #8]
 8002e72:	f000 f8c1 	bl	8002ff8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b22      	cmp	r3, #34	@ 0x22
 8002e96:	d108      	bne.n	8002eaa <UART_DMAError+0x7a>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002ea4:	68b8      	ldr	r0, [r7, #8]
 8002ea6:	f000 f8ce 	bl	8003046 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb6:	68b8      	ldr	r0, [r7, #8]
 8002eb8:	f7ff fef2 	bl	8002ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b098      	sub	sp, #96	@ 0x60
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2222      	movs	r2, #34	@ 0x22
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	4a3e      	ldr	r2, [pc, #248]	@ (8002fec <UART_Start_Receive_DMA+0x128>)
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ff0 <UART_Start_Receive_DMA+0x12c>)
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	4a3c      	ldr	r2, [pc, #240]	@ (8002ff4 <UART_Start_Receive_DMA+0x130>)
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	f7fd ffbc 	bl	8000ea0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d019      	beq.n	8002f7a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	330c      	adds	r3, #12
 8002f4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f66:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002f6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e5      	bne.n	8002f46 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3314      	adds	r3, #20
 8002f98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f9a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002fce:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6a39      	ldr	r1, [r7, #32]
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e5      	bne.n	8002fae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3760      	adds	r7, #96	@ 0x60
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	08002cc9 	.word	0x08002cc9
 8002ff0:	08002df5 	.word	0x08002df5
 8002ff4:	08002e31 	.word	0x08002e31

08002ff8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	@ 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	61ba      	str	r2, [r7, #24]
 8003022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	6979      	ldr	r1, [r7, #20]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	613b      	str	r3, [r7, #16]
   return(result);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e5      	bne.n	8003000 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800303c:	bf00      	nop
 800303e:	3724      	adds	r7, #36	@ 0x24
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003046:	b480      	push	{r7}
 8003048:	b095      	sub	sp, #84	@ 0x54
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800306e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003074:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800307c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3314      	adds	r3, #20
 8003088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	61fb      	str	r3, [r7, #28]
   return(result);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	64bb      	str	r3, [r7, #72]	@ 0x48
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e5      	bne.n	8003082 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d119      	bne.n	80030f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f023 0310 	bic.w	r3, r3, #16
 80030d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030de:	61ba      	str	r2, [r7, #24]
 80030e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	6979      	ldr	r1, [r7, #20]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	613b      	str	r3, [r7, #16]
   return(result);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e5      	bne.n	80030be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003100:	bf00      	nop
 8003102:	3754      	adds	r7, #84	@ 0x54
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff fdbb 	bl	8002ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b21      	cmp	r3, #33	@ 0x21
 8003144:	d13e      	bne.n	80031c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314e:	d114      	bne.n	800317a <UART_Transmit_IT+0x48>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d110      	bne.n	800317a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800316c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	1c9a      	adds	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]
 8003178:	e008      	b.n	800318c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6211      	str	r1, [r2, #32]
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4619      	mov	r1, r3
 800319a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fd43 	bl	8002c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	@ 0x30
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b22      	cmp	r3, #34	@ 0x22
 8003212:	f040 80ae 	bne.w	8003372 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800321e:	d117      	bne.n	8003250 <UART_Receive_IT+0x50>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d113      	bne.n	8003250 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	b29a      	uxth	r2, r3
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	1c9a      	adds	r2, r3, #2
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	629a      	str	r2, [r3, #40]	@ 0x28
 800324e:	e026      	b.n	800329e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003262:	d007      	beq.n	8003274 <UART_Receive_IT+0x74>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <UART_Receive_IT+0x82>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e008      	b.n	8003294 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800328e:	b2da      	uxtb	r2, r3
 8003290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003292:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4619      	mov	r1, r3
 80032ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d15d      	bne.n	800336e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0220 	bic.w	r2, r2, #32
 80032c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d135      	bne.n	8003364 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	613b      	str	r3, [r7, #16]
   return(result);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f023 0310 	bic.w	r3, r3, #16
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331e:	623a      	str	r2, [r7, #32]
 8003320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	69f9      	ldr	r1, [r7, #28]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	61bb      	str	r3, [r7, #24]
   return(result);
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e5      	bne.n	80032fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b10      	cmp	r3, #16
 800333e:	d10a      	bne.n	8003356 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fca8 	bl	8002cb2 <HAL_UARTEx_RxEventCallback>
 8003362:	e002      	b.n	800336a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fd f8bd 	bl	80004e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e002      	b.n	8003374 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	3730      	adds	r7, #48	@ 0x30
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80033b6:	f023 030c 	bic.w	r3, r3, #12
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2c      	ldr	r2, [pc, #176]	@ (8003490 <UART_SetConfig+0x114>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d103      	bne.n	80033ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7fe fd1e 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	e002      	b.n	80033f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033ec:	f7fe fd06 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80033f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009a      	lsls	r2, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	4a22      	ldr	r2, [pc, #136]	@ (8003494 <UART_SetConfig+0x118>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	0119      	lsls	r1, r3, #4
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fbb2 f2f3 	udiv	r2, r2, r3
 8003428:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <UART_SetConfig+0x118>)
 800342a:	fba3 0302 	umull	r0, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2064      	movs	r0, #100	@ 0x64
 8003432:	fb00 f303 	mul.w	r3, r0, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	3332      	adds	r3, #50	@ 0x32
 800343c:	4a15      	ldr	r2, [pc, #84]	@ (8003494 <UART_SetConfig+0x118>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003448:	4419      	add	r1, r3
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009a      	lsls	r2, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003460:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <UART_SetConfig+0x118>)
 8003462:	fba3 0302 	umull	r0, r3, r3, r2
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2064      	movs	r0, #100	@ 0x64
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	3332      	adds	r3, #50	@ 0x32
 8003474:	4a07      	ldr	r2, [pc, #28]	@ (8003494 <UART_SetConfig+0x118>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	440a      	add	r2, r1
 8003486:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40013800 	.word	0x40013800
 8003494:	51eb851f 	.word	0x51eb851f

08003498 <memset>:
 8003498:	4603      	mov	r3, r0
 800349a:	4402      	add	r2, r0
 800349c:	4293      	cmp	r3, r2
 800349e:	d100      	bne.n	80034a2 <memset+0xa>
 80034a0:	4770      	bx	lr
 80034a2:	f803 1b01 	strb.w	r1, [r3], #1
 80034a6:	e7f9      	b.n	800349c <memset+0x4>

080034a8 <__libc_init_array>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	2600      	movs	r6, #0
 80034ac:	4d0c      	ldr	r5, [pc, #48]	@ (80034e0 <__libc_init_array+0x38>)
 80034ae:	4c0d      	ldr	r4, [pc, #52]	@ (80034e4 <__libc_init_array+0x3c>)
 80034b0:	1b64      	subs	r4, r4, r5
 80034b2:	10a4      	asrs	r4, r4, #2
 80034b4:	42a6      	cmp	r6, r4
 80034b6:	d109      	bne.n	80034cc <__libc_init_array+0x24>
 80034b8:	f000 f828 	bl	800350c <_init>
 80034bc:	2600      	movs	r6, #0
 80034be:	4d0a      	ldr	r5, [pc, #40]	@ (80034e8 <__libc_init_array+0x40>)
 80034c0:	4c0a      	ldr	r4, [pc, #40]	@ (80034ec <__libc_init_array+0x44>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	42a6      	cmp	r6, r4
 80034c8:	d105      	bne.n	80034d6 <__libc_init_array+0x2e>
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d0:	4798      	blx	r3
 80034d2:	3601      	adds	r6, #1
 80034d4:	e7ee      	b.n	80034b4 <__libc_init_array+0xc>
 80034d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034da:	4798      	blx	r3
 80034dc:	3601      	adds	r6, #1
 80034de:	e7f2      	b.n	80034c6 <__libc_init_array+0x1e>
 80034e0:	08003550 	.word	0x08003550
 80034e4:	08003550 	.word	0x08003550
 80034e8:	08003550 	.word	0x08003550
 80034ec:	08003554 	.word	0x08003554

080034f0 <memcpy>:
 80034f0:	440a      	add	r2, r1
 80034f2:	4291      	cmp	r1, r2
 80034f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034f8:	d100      	bne.n	80034fc <memcpy+0xc>
 80034fa:	4770      	bx	lr
 80034fc:	b510      	push	{r4, lr}
 80034fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003502:	4291      	cmp	r1, r2
 8003504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003508:	d1f9      	bne.n	80034fe <memcpy+0xe>
 800350a:	bd10      	pop	{r4, pc}

0800350c <_init>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	bf00      	nop
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr

08003518 <_fini>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr
